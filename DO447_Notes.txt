

	Welcome to DO447 : Advanced Automation: Ansible Best 	Practice
				Ansible 2.8 

Name:
Org: if possible

Expectations:
Experience and Prerequisites:
	• Red Hat Certified System Administrator (EX200 / RHCSA) certification or equivalent Red Hat Enterprise Linux knowledge and experience.
	• Red Hat Certified Specialist in Ansible Automation (DO407/EX407) certification, Red Hat Certified Engineer (RHCE) certification on Red Hat Enterprise Linux 8 (RH294/EX294), or equivalent Ansible experience. DO417

City/Timezone: 
Hobbies:

EST 	4
CST		2
MST
PST		2

RH294		2 (David,Luis,John)			
DO407					
DO417		1(Luis)		
No Course	1(Jason,Michele,Richard,Robert)	

DO447-RHAE2.8-en-1-20200501





Chapter 1:

Shell/Command/raw modules are not Idempotent, Overwrite even if things exist "Desired state"

Idempotent modules will check "Desired State", it already exists doesn't make any change



				###############  Instructions to Run Playbook ###############


###############  Step 1:  Check Syntax of Playbook ###############

ansible-playbook install_httpd.yml --syntax-check


###############  Step 2:  Run Playbook in Simulation Mode (DRY RUN/ Simulation /Oracle Prediction) ###############
###############  Step 2:  This Step only check in playbook if tasks will make any changes in managed hosts or not if run in read mode ###############

ansible-playbook install_httpd.yml --check

				#### OR ####

ansible-playbook install_httpd.yml -C


###############  Step 3:  Run Playbook in Real Mode ###############

ansible-playbook install_httpd.yml 

Dynamic Inventory
Python/any other script:


Active Directory
LDAP
RH satelite
Amazon
GCE
Azure


Run a playbook on groups where serverb* is the member

Roles:
Private/Organization Roles:
Public Roles		:	ansible-galaxy
RedHat Roles		:	Supported/Paid




Chapter 2:

Inventory-file		Runtime-inventory

Inventory-file  -> Verify Inventory Syntax AND Overrise variable for groups if server exists in many groups (ansible-inventory inventory.yml -y --list)  -> ansible[AD-HOC]/ansible-playbook[PLAYBOOK] abc.yml


ansible-inventory purpose is not convert ini to yaml, instead what is final value for some_var at run time

## Ansible Variable Precedence List ##
https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable


		Scope of Variables:
Host Scope <  Play Scope  < Global Scope

A.	Host Scope

	1.	command line values (for example, -u my_user, these are not variables)    e.g. --user devops 
			ansible servera -m yum -a 'name=httpd state=latest' -C -vvv --user devops
	1.	Role Defaults				use : symbol
	2.	inventory File group variable		use = symbol		//NEVER
	3.	inventory/group_vars/all		use : symbol		//When Inventory is Shared
	4.	inventory/group_vars/groupname		use : symbol		//When Inventory is Shared
	5.	groups_vars/{{groupname}}		use : symbol		// when Specific requirement for playbooks
	
	
	6.	inventory File_ server variable		use = symbol		//NEVER
	7.	inventory/host_vars/hostname		use : symbol
	8.	host_vars/{{servername}}		use : symbol

B. 	Playbook Scope
	9.	vars:								//NOT Recommended
	
	10.	vars_prompt:							// Only for Development Environment
			Look into vars_prompt_demo.yml in extras folder
	11.	vars_files:							// For Different ENV
			- file_path
	12.	Task Scope:							// 
		vars:
		  variable_name: "Value"  ## For that Specific Task
	13.	set_fact:							// Dev ENV
			
C.	Global Scope (Command Line Values)
	14. ansible-playbook abc.yml -e 'var_name=some_value' 			// TEST at RUN
	
	
	ansible_connection
	unix/Linux	ssh(default)
	windows		winrm
	network devices	network_cli, netconf



	
1. Pre Tasks Tasks
2. Pre Tasks Handlers
3. Dependency Role Tasks (security_server)
4. Main Role Tasks (web_server)
5. extra tasks in playbook
6. Dependency Role Handlers (security_server)
7. Main Role Handlers (web_server)
8. extra handlers invoked by tasks in playbook
9. Post Tasks Tasks
10. Post Tasks Handlers



import_role			include_role
static/pre-processing		Dynamic/Runtime
Development			Production

Use case for flush_handlers


Import (import_tasks, import_role)
static inclusion of tasks(you know tasks in advance)
ansible-playbook abc.yml --syntax-check    ## also check syntax of imported Task file
4  task in external file ## Condition checked on all task one by one although condition is false
--start-at-task can be used to start execution of playbook at certain point
Might take more time
for Development Environment

include (include_tasks, include_role)
Dynamic inclusion of tasks(you DO NOT know tasks in advance)
ansible-playbook abc.yml --syntax-check    ## DOES NOT check syntax of included Task file
4  task in external file ## Condition checked only once, if false, file tasks are not included in execution of playbook
--start-at-task does n't work as task names are NOT known in advance
Time efficient
for Production Environment

import_playbook: playbook can only be imported NOT included


LOOP will not work for block:




T1
H1 invoke

T2
H2 invoke

T3
H3 invoke

T4
H4 invoke

T 1 2 3 4 H 1 2 3 4
T 1 2 meta( H1 H2)   T 3 4      H 3 4


ansible-playbook  use_role.yml --list-tasks
ansible-playbook  use_role.yml --step

ANSIBLE_CALLBACK_STDOUT=yaml ansible-playbook some.yml
//PRINT New line breaks

Tags

System Tags: all always never untagged tagged
User Named tags: USER_DEFINED


 ##   ansible-playbook  tagged_demo.yml --skip-tags test,prod,always
 ##   ansible-playbook  tagged_demo.yml tags dev --skip-tags test,prod,always
 ##   ansible-playbook  tagged_demo.yml --tags dev --skip-tags test,prod,always
 ##   ansible-playbook  tagged_demo.yml
 ##   ansible-playbook  tagged_demo.yml --tags never
 ##   ansible-playbook  tagged_demo.yml --tags never,untagged
 ##   ansible-playbook  tagged_demo.yml --tags never,untagged --skip-tags always
ansible-playbook  tagged_demo.yml --list-tags
ansible-playbook  tagged_demo.yml --list-tasks
 all never unatgged always special rest are CUSTOM 


Vim Block procedure:
1. ctrl v
2. select
3. I   c
4. Insert(whatever)
5. esc esc (twice)

gather_facts in ANsible Tower ??
		
Forks & Serial: Use to implement CI/CD




	forks									serial
1.	ansible.cfg								playbook
	--forks=4
2.	Manage number of threads/load			control no of systems updating at same time
	 on control node (save control node)
3.	task by task								host by host/play by play


5 tasks
forks 4
Hosts: 12
	Horizontal Direction
	A	B	C	D		E	F	 G 	H 		I 	J	K	L
	1	1	1	1		1	1	1	1		1	1	1	1
	2	2	2	2		2	2	2	2		2	2	2	2
	3	3	3	3		3	3	3	3		3	3	3	3
	4	4	4	4		4	4	4	4		4	4	4     4
	5	5	5	5		5	5	5	5		5	5	5	5
	
	
	
serial: 3
Vertical Direction:
	A	B	C		D	E	F 		G 	H 	I	 	J	K	L
	1	1	1		1	1	1		1	1	1		1	1	1
	2	2	2		2	2	2		2	2	2		2	2	2
	3	3	3		3	3	3		3	3	3		3	3	3
	4	4	4		4	4	4		4	4	4		4	4	4
	
	


	
	
	
	lookup password plugin create password put in plain text in localfile
				sha512 store in remote system
ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook  filters_demo.yml	
	
	
Chapter 6:
	
	GUI		nginx
	Messgaing	Rabbitmq
	Database	Postgresql(3.1 onwards) earlier mongodb
	supervisord
	ansible-tower-service status
	
Tower:

1. Playbook (Manual Copy/Download git) 
2. /var/lib/awx/projects owner chown -R awx:awx /var/lib/awx/projects/{Some_Folder}
3. Inventory
4. Credentials
5. Projects     1<-->1 mapping of folder
6. Job Template
7. RBAC


ANSIBLE_STDOUT_CALLBACK=yaml 	ansible-playbook filters_demo.yml


default('CONTAINED',true)

another|default(omit)










Chapter 6:

Ansible Tower: 

ansible core

1. GUI Service   NGinx
2. Postgresql Database
3. Messaging Service RabbitMQ
4. supervisord.service

3.6/3.7 onwards redis Database

Run a Job:
1. Organization
2. Inventory
3. Playbook Folder(Manual Copy/Git SCM)
4. Change permission to chmod -R awx:awx /var/lib/awx/projects/your_folder
5. Project maps to your_playbook_folder (Project <-> one_folder) One to one Mapping
6. Credentials Tower
7. Job Template
8. RBAC User/Team


tower-cli  receive --user simon --format yaml

tower-cli receive --team Operations -f yaml

tower-cli user list

https://github.com/theforeman/foreman_ansible_inventory/blob/master/foreman_ansible_inventory.py


Workflow Job Templates


Secuirty_template -> Information_template -> Database_server -> Web_server -> FTP_Server -> Firewall_template -> Testing -> Open for Public template

Chapter 12: 
Static Inventory:
	GUI
	Static File/Folder
			awx-manage inventory_import --source=inventory/  --inventory-name="My Tower Inventory"  --overwrite
			overwrite add hosts which doesn't exists in existing inventory, it doesn't overwrite/delete hosts which are NOT part of new Inventory
	From Project ( Developer Push project( with inventory ) to GIT, Create inventory in Tower from GIT Project)
Dynamic Inventory
	LDAP
	Active Directory
	Cloud Platform ( Azure, Google, AWS)
	Custom Infrastructure
	https://github.com/ansible/ansible/tree/stable-2.9/contrib/inventory
Smart Inventory
	It is NOT a Manual Inventory,  create inventory on the FLY based on their FACTS/Values
	
	
	
	
	
	
	
	
	
	
	
	
